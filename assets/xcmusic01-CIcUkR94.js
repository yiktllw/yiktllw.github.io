import{c as T}from"./copy-BNUq0S91.js";import{d as S,r as C,n as j,b as F,c,a as s,e as g,t as n,u as i,f as B,g as a,h as w,F as I,i as M,o as p}from"./index-BgJE6vnw.js";import"https://cdn.jsdelivr.net/npm/mermaid@11/dist/mermaid.esm.min.mjs";const X={class:"blog-info"},q={class:"blog-title"},D={class:"info"},P={class:"create-time"},N={class:"last-update"},U={class:"reading-time"},$={key:0,class:"category"},L={key:1,class:"series"},O=["data-open"],V={class:"line-numbers"},G={class:"top-line"},Y=["src"],K=S({__name:"xcmusic01",setup(z){const u=C(),l=document.createElement("script");l.src="https://utteranc.es/client.js",l.setAttribute("repo","yiktllw/yiktllw.github.io"),l.setAttribute("issue-term","2025/04/xcmusic01"),l.setAttribute("label","💬comment"),l.setAttribute("theme",`github-${window.theme??"dark"}`),l.setAttribute("crossorigin","anonymous"),l.setAttribute("async","true"),j(()=>{var o,t,r;(o=u.value)==null||o.appendChild(l),(t=window.mermaid)==null||t.initialize({startOnLoad:!1,theme:window.theme==="dark"?"dark":"default"}),(r=window.mermaid)==null||r.run()});const e=F.find(o=>o.component==="@/blogs/2025/04/xcmusic01.vue");document.title=(e==null?void 0:e.blogInfo.title)??"yiktllw的博客";const x=[`<!-- 逐字歌词动画 -->
<span
  class="item-white font-color-main"
  :style="{
    transition: \`clip-path \${(word.duration ?? 0) + (word.startTime ?? line.startTime) > currentTime ? (word.duration ?? 0) / 1000 : 0}s linear, color 0.5s ease\`,
    clipPath:
      word.startTime <= currentTime ? 'inset(0 0% 0 0)' : 'inset(0 100% 0 0)',
    color:
      index === currentLine
        ? 'var(--font-color-main)'
        : 'var(--font-color-standard)',
  }"
>
  {{ word.text }}
</span>
`],k=o=>{const t=x[o];navigator.clipboard.writeText(t)},m=C([!0]),_=o=>{m.value[o]=!m.value[o]};return(o,t)=>{var r,h,f,v,b,E,y,A;return p(),c("div",{class:"blog",ref_key:"blog",ref:u},[s("div",X,[s("h1",q,n(((r=i(e))==null?void 0:r.blogInfo.title)??"Untitled"),1),s("div",D,[s("span",P,[t[2]||(t[2]=s("span",{class:"ele-title"},"发布于：",-1)),a(n(i(w)(((h=i(e))==null?void 0:h.blogInfo.createTime)??0)),1)]),s("span",N,[t[3]||(t[3]=s("span",{class:"ele-title"},"修改于：",-1)),a(n(i(w)(((f=i(e))==null?void 0:f.blogInfo.lastUpdate)??0)),1)]),s("span",U,[t[4]||(t[4]=s("span",{class:"ele-title"},"阅读时长：",-1)),a(n((v=i(e))==null?void 0:v.blogInfo.readingTime)+"分钟 ",1)]),((b=i(e))==null?void 0:b.blogInfo.category)!=="default"?(p(),c("span",$,[t[5]||(t[5]=s("span",{class:"ele-title"},"分类：",-1)),a(n((E=i(e))==null?void 0:E.blogInfo.category),1)])):B("",!0),(y=i(e))!=null&&y.blogInfo.series.enable?(p(),c("span",L,[t[6]||(t[6]=s("span",{class:"ele-title"},"系列：",-1)),a(n((A=i(e))==null?void 0:A.blogInfo.series.name),1)])):B("",!0),t[7]||(t[7]=s("span",{class:"copy-right"},[s("span",{class:"ele-title"},"许可协议："),s("p",{"xmlns:cc":"http://creativecommons.org/ns#"},[s("a",{href:"https://creativecommons.org/licenses/by-nc-sa/4.0/?ref=chooser-v1",target:"_blank",rel:"license noopener noreferrer",style:{display:"inline-block"}},[a("CC BY-NC-SA 4.0"),s("img",{style:{height:"22px !important","margin-left":"3px","vertical-align":"text-bottom"},src:"https://mirrors.creativecommons.org/presskit/icons/cc.svg?ref=chooser-v1",alt:""}),s("img",{style:{height:"22px !important","margin-left":"3px","vertical-align":"text-bottom"},src:"https://mirrors.creativecommons.org/presskit/icons/by.svg?ref=chooser-v1",alt:""}),s("img",{style:{height:"22px !important","margin-left":"3px","vertical-align":"text-bottom"},src:"https://mirrors.creativecommons.org/presskit/icons/nc.svg?ref=chooser-v1",alt:""}),s("img",{style:{height:"22px !important","margin-left":"3px","vertical-align":"text-bottom"},src:"https://mirrors.creativecommons.org/presskit/icons/sa.svg?ref=chooser-v1",alt:""})])])],-1))])]),t[9]||(t[9]=g('<p> 网易云音乐的歌词api返回的歌词类型有两种：逐行歌词（lrc）和逐字歌词（yrc）。 </p><h2 id="%E7%9B%AE%E6%A0%87" tabindex="-1">目标</h2><p>需要实现的歌词动画包括：</p><ol><li>滚动动画：平滑滚动到当前行</li><li>缩放动画：当前行的缩放从1.0缓变为1.3，上一行反向变化</li><li>逐字歌词动画：从左到右的剪切效果</li></ol><p>逐行歌词可视为逐字歌词的特例：即动画长度为0的逐字歌词。</p><h2 id="%E5%88%9D%E4%BB%A3%E6%96%B9%E6%A1%88%EF%BC%9A%E5%9F%BA%E4%BA%8Ecss%E5%8A%A8%E7%94%BB%E7%9A%84%E5%AE%9E%E7%8E%B0" tabindex="-1"> 初代方案：基于CSS动画的实现 </h2><p> 初版应用于XCMusic <a href="https://github.com/yiktllw/XCMusic/releases/tag/0.2.4">0.2.4</a>及之前版本。 </p><p>主要原理是：</p><ol><li>用<code>requestAnimationFrame</code>计算滚动动画位置</li><li>CSS动画处理缩放效果；</li><li><code>clip-path</code>实现逐字动画，动画时长对应歌词时间</li></ol>',9)),s("pre",null,[s("code",{"data-open":m.value[0],class:"hljs language-vue",style:{"font-family":"yiktllw-code, serif",position:"relative"}},[s("div",V,[(p(),c(I,null,M(15,d=>s("span",null,n(d),1)),64))]),s("div",G,[s("div",{onClick:t[0]||(t[0]=d=>_(0)),class:"language"},"vue"),s("div",{class:"copy-button",onClick:t[1]||(t[1]=d=>k(0))},[s("img",{class:"copy-img",src:i(T)},null,8,Y)])]),t[8]||(t[8]=g(`<div class="code"><span class="language-xml"><span class="hljs-comment">&lt;!-- 逐字歌词动画 --&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name">span</span>
  <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;item-white font-color-main&quot;</span>
  <span class="hljs-attr">:style</span>=<span class="hljs-string">&quot;{
    transition: \`clip-path \${(word.duration ?? 0) + (word.startTime ?? line.startTime) &gt; currentTime ? (word.duration ?? 0) / 1000 : 0}s linear, color 0.5s ease\`,
    clipPath:
      word.startTime &lt;= currentTime ? &#39;inset(0 0% 0 0)&#39; : &#39;inset(0 100% 0 0)&#39;,
    color:
      index === currentLine
        ? &#39;var(--font-color-main)&#39;
        : &#39;var(--font-color-standard)&#39;,
  }&quot;</span>
&gt;</span>
  {{ word.text }}
<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>
</span></div>`,1))],8,O)]),t[10]||(t[10]=g('<h2 id="%E4%BA%8C%E4%BB%A3%E6%96%B9%E6%A1%88%EF%BC%9A%E4%BD%BF%E7%94%A8canvas%E5%AE%9E%E7%8E%B0" tabindex="-1"> 二代方案：使用Canvas实现 </h2><p> 应用于XCMusic <a href="https://github.com/yiktllw/XCMusic/releases/tag/0.2.5">0.2.5</a>至<a href="https://github.com/yiktllw/XCMusic/releases/tag/0.3.0">0.3.0</a>版本。 </p><p>在第一版歌词中，我发现其存在诸多不便利性：</p><ol><li>CSS动画无法暂停</li><li>过多的dom元素导致的内存占用问题</li><li>CSS动画的自由性太低</li></ol><p>恰好Canvas能够完美解决上述问题。</p><p>使用Canvas完成歌词的逻辑：</p><ol><li>获取当前系统缩放和应用缩放并适配，防止Canvas模糊</li><li>根据解析后的歌词，计算每一行歌词的位置。</li><li> 使用requestAnimationFrame在每一帧完成： <ul><li>获取当前音频的播放进度</li><li>计算当前滚动高度，实现滚动动画</li><li>根据滚动高度与当前行高度的差值，计算缩放动画和字体颜色</li><li> 计算当前逐字动画位置，并计算<code>cutX</code>的位置。<br> 与第一版歌词类似，在<code>scrollY</code>处画两份歌词：一份为白色，仅显示<code>cutX</code>左侧的部分；另一份为灰色，仅显示<code>cutX</code>右侧的部分。 </li></ul></li><li>监听用户鼠标滚轮，并执行对应的滚动动画。</li></ol><p>纯js实现带来的自由度是极高的--这一版动画的效果也是最好的。</p><p><strong>已知的问题</strong>：</p><ol><li> 在使用歌词时，electron的GPU进程占用的内存会逐步上涨，大约在一整天内从10MB以内上涨到100MB左右。而electron没有提供api来清除GPU进程的内存占用。<s>可以通过禁用GPU加速来解决此问题</s></li><li> 放弃使用DOM的同时也放弃了现有的滚动容器和排版系统。前者导致歌词的滚动交互体验变差，而后者意味着长行歌词的排版成为一个大问题 </li><li> 由于需要在每一帧计算动画，性能优化格外重要。这大大限制了代码的可读性，增大了维护难度。<s>过几天自己都不知道写了个啥</s></li></ol><h2 id="%E6%9C%80%E7%BB%88%E7%89%88%E6%9C%AC%EF%BC%9A%E5%9F%BA%E4%BA%8Eweb-animations-api%E5%92%8Ccss%E6%AD%8C%E8%AF%8D%E5%8A%A8%E7%94%BB" tabindex="-1"> 最终版本：基于Web Animations API和CSS歌词动画 </h2><p>最终版歌词动画，在XCMusic 0.3.1（未发布）及之后的版本中使用。</p>',12))],512)}}});export{K as default};
