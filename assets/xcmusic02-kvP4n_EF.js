import{d as S,r as b,n as I,o as F,b as N,c as d,a as t,e as R,t as l,u as a,f as E,g,h as f,i as M,F as q,j as L,k as p}from"./index-DBRjhJB0.js";import"https://cdn.jsdelivr.net/npm/mermaid@11/dist/mermaid.esm.min.mjs";const D={class:"blog-container",ref:"container"},V={class:"blog-info"},W={class:"blog-title"},J={class:"sidebar-placeholder"},j={class:"sidebar-container"},z={class:"nav"},P={class:"nav-content"},X={class:"article toc active",id:"article"},O={class:"depth-0"},U={class:"info"},Y={class:"create-time"},$={class:"last-update"},G={class:"word-count"},H={class:"reading-time"},K={key:0,class:"category"},Q={key:1,class:"series"},Z={key:2,class:"tags"},oe=S({__name:"xcmusic02",setup(ee){const v=b(),r=b([]),c=b(0),B=()=>{const n=(document.documentElement.scrollTop||document.body.scrollTop)+100;let e=0;for(const[s,u]of r.value.entries())if(n>u)if(r.value[s+1]&&n<r.value[s+1]){e=s;break}else s===r.value.length-1&&(e=s);e!==c.value&&(c.value=e)};I(()=>{document.querySelectorAll(".blog h2, .blog h3, .blog h4, .blog h5, .blog h6").forEach(e=>{r.value.push(e.offsetTop)}),r.value.map(e=>-e),r.value.sort((e,s)=>e-s),document.addEventListener("scroll",B)}),F(()=>{document.removeEventListener("scroll",B)});const A=n=>{const e=document.getElementById(n),s=document.getElementById(n==="article"?"site":"article");s?(s.classList.remove("active"),e&&(e.style.display="block",e.style.position="absolute"),setTimeout(()=>{e&&(e.classList.add("active"),e.style.position="initial"),s.style.display="none"},200)):e&&e.classList.add("active");const u=document.getElementById("nav_"+n),m=document.getElementById("nav_"+(n==="article"?"site":"article"));u&&u.classList.add("selected"),m&&m.classList.remove("selected")},i=document.createElement("script");i.src="https://utteranc.es/client.js",i.setAttribute("repo","yiktllw/yiktllw.github.io"),i.setAttribute("issue-term","2025/04/xcmusic02"),i.setAttribute("label","💬comment"),i.setAttribute("theme",`github-${window.theme??"dark"}`),i.setAttribute("crossorigin","anonymous"),i.setAttribute("async","true"),I(()=>{var n,e,s;(n=v.value)==null||n.appendChild(i),(e=window.mermaid)==null||e.initialize({startOnLoad:!1,theme:window.theme==="dark"?"dark":"default"}),(s=window.mermaid)==null||s.run()});const o=N.find(n=>n.component==="@/blogs/2025/04/xcmusic02.vue");return document.title=(o==null?void 0:o.blogInfo.title)??"yiktllw的博客",b([]),(n,e)=>{var s,u,m,y,k,C,_,w,T,x;return p(),d("div",D,[t("div",{class:"blog",ref_key:"blog",ref:v},[t("div",V,[t("h1",W,l(((s=a(o))==null?void 0:s.blogInfo.title)??"Untitled"),1)]),e[2]||(e[2]=R('<h2 id="electron-%E7%9A%84%E6%89%93%E5%8C%85%E6%96%B9%E5%BC%8F" tabindex="-1"> Electron 的打包方式 </h2><p> Electron 采用 Chromium 前端 + NodeJS 后端 + 系统 API 的架构模式<sup class="footnote-ref"><a href="#fn1" id="fnref1">[1]</a></sup>。软件打包后，Chromium 和 NodeJS 构成了存储空间的主要部分。 </p><p> 以 XCMusic 的 Windows 安装包为例：Electron 10+ 打包体积约 60MB，升级至 Electron 35 后增至 80MB，而我实际编写的应用代码和资源（app.asar）仅占 15MB。 </p><p> 这种打包机制存在显著弊端：每个 Electron 应用都需内置完整的 Chromium 运行时，导致用户设备可能同时存在数十个重复的 Chromium 实例。 </p><p><s>喜报：爷的电脑上有 xx 个 Chromium.jpg</s><sup class="footnote-ref"><a href="#fn2" id="fnref2">[2]</a></sup></p><h2 id="%E5%85%BC%E5%AE%B9%E6%80%A7-or-%E7%A1%AC%E7%9B%98%E7%A9%BA%E9%97%B4" tabindex="-1"> 兼容性 OR 硬盘空间 </h2><p> Tauri 的安装包不包含 Webview 组件，直接调用系统原生 Webview 进行渲染： </p><blockquote><p><strong>Minimal Size</strong><sup class="footnote-ref"><a href="#fn3" id="fnref3">[3]</a></sup></p><p> By using the OS&#39;s native web renderer，the size of a Tauri app can be little as 600KB. </p></blockquote><p> 这种设计使得 Tauri 打包后的体积是极小的——我认为这正是 Tauri 的核心竞争力所在。 </p><p> 但是，这种设计也意味着需要开发者适配不同操作系统的 Webview 特性差异。对于个人开发者而言，跨平台调试所需的时间成本是不得不考虑的问题。 </p><p> 如同 VSCode 以性能换取生态优势，Electron 与 Tauri 的取舍本质上是兼容性与资源占用的权衡。 </p><h2 id="%E5%86%85%E5%AD%98%E5%AE%89%E5%85%A8...%E5%90%97%3F" tabindex="-1"> 内存安全...吗? </h2><p>Tauri 在官网上强调：</p><blockquote><p><strong>Maximum Security</strong><sup class="footnote-ref"><a href="#fn3" id="fnref3:1">[3:1]</a></sup></p><p> Front-of-mind for the Tauri Team that drives our highest priorities and biggest innovations. </p></blockquote><blockquote><p><strong>Powered by Rust</strong><sup class="footnote-ref"><a href="#fn3" id="fnref3:2">[3:2]</a></sup></p><p> With performance and security at the center, Rust is the language for the next generation of apps. </p></blockquote><p> 作为内存安全的系统级语言，Rust 确实为后端代码提供了安全保障。<strong><em>但是</em></strong>，正如 Tauri 在其官网上宣传的那样： </p><blockquote><p><strong>Frontend Independent</strong><sup class="footnote-ref"><a href="#fn3" id="fnref3:3">[3:3]</a></sup></p><p> Bring your existing web stack to Tauri or start that new dream project. Tauri supports any frontend framework so you don’t need to change your stack. </p></blockquote><p> Tauri 只在后端使用了 Rust，你可以使用任何语言编写前端：使用 Rust 的 Dioxus、Yew；使用 JS 的 Vue, React 等。 </p><p> 在 XCMusic 中，Electron 后端代码仅 1200 行，而基于 Vue 的前端代码高达 2.6w 行。这意味着即使迁移至 Tauri，仅有 4% 的代码能享受 Rust 的内存安全优势。 </p><p> 在 XCMusic 中：Tauri 主进程内存占用控制在 10MB 以内，但 Windows Webview 进程内存消耗约 300MB——与 Electron 渲染进程的占用水平基本持平。 </p><p> 由此可见，为获得有限的安全提升而抛弃 Electron 的兼容性和生态优势，其性价比值得商榷。 </p><h2 id="%E6%A0%B8%E5%BF%83%E9%97%AE%E9%A2%98%EF%BC%9A%E7%BD%91%E6%98%93%E4%BA%91%E9%9F%B3%E4%B9%90-api" tabindex="-1"> 核心问题：网易云音乐 API </h2><p> XCMusic 依赖的 <a href="https://github.com/Binaryify/NeteaseCloudMusicApi">NeteaseCloudMusicApi</a> 是基于 NodeJS 的实现。Electron 内置 NodeJS 环境，可直接启动该服务；而在 Tauri 中则面临两难选择： </p><ol><li>打包为二进制程序：将增加约 40MB 体积，显著削弱 Tauri 的体积优势</li><li> 重写为 Rust 版本：需重构 2w 行 JS 代码，开发成本过高<sup class="footnote-ref"><a href="#fn4" id="fnref4">[4]</a></sup></li></ol><p>二者均不具备可行性。</p><h2 id="%E7%BB%93%E8%AE%BA" tabindex="-1">结论</h2><p> 对于全新开发的 Windows 桌面应用，采用 Tauri 配合 Rust 前端框架（如 Dioxus/Yew）是值得考虑的方案。 </p><p> 然而就 XCMusic 而言，作为跨平台 Vue 应用，迁移至 Tauri 难以获得显著的安全增益，是费力不讨好的。 </p><hr class="footnotes-sep"><section class="footnotes"><ol class="footnotes-list"><li id="fn1" class="footnote-item"><p><a href="https://www.electronjs.org/zh/docs/latest/">简介：Electron</a><a href="#fnref1" class="footnote-backref">↩︎</a></p></li><li id="fn2" class="footnote-item"><p><a href="https://github.com/xh321/CefDetector.Net">GitHub：检测电脑中有多少个 Chromium 内核的程序</a><a href="#fnref2" class="footnote-backref">↩︎</a></p></li><li id="fn3" class="footnote-item"><p><a href="https://v2.tauri.app/">Tauri 2.0 官方网站</a><a href="#fnref3" class="footnote-backref">↩︎</a><a href="#fnref3:1" class="footnote-backref">↩︎</a><a href="#fnref3:2" class="footnote-backref">↩︎</a><a href="#fnref3:3" class="footnote-backref">↩︎</a></p></li><li id="fn4" class="footnote-item"><p> GitHub 上有将此项目转写为 Rust 的版本，但是其最后更新在 2018 年，提供的 API 很少，可用性不高。 <a href="#fnref4" class="footnote-backref">↩︎</a></p></li></ol></section>',30))],512),t("div",J,[t("div",j,[t("div",z,[t("div",{class:"nav-item selected",id:"nav_article",onClick:e[0]||(e[0]=h=>A("article"))}," 文章信息 "),t("div",{class:"nav-item",id:"nav_site",onClick:e[1]||(e[1]=h=>A("site"))}," 站点概览 ")]),t("div",P,[t("div",X,[e[11]||(e[11]=t("div",{class:"toc-title"},"目录",-1)),e[12]||(e[12]=t("div",{class:"progress-bar"},null,-1)),t("ul",O,[t("li",null,[t("a",{href:"#electron-%E7%9A%84%E6%89%93%E5%8C%85%E6%96%B9%E5%BC%8F",class:E(c.value===0?"active":"not-active")},"1 Electron 的打包方式",2)]),t("li",null,[t("a",{href:"#%E5%85%BC%E5%AE%B9%E6%80%A7-or-%E7%A1%AC%E7%9B%98%E7%A9%BA%E9%97%B4",class:E(c.value===1?"active":"not-active")},"2 兼容性 OR 硬盘空间",2)]),t("li",null,[t("a",{href:"#%E5%86%85%E5%AD%98%E5%AE%89%E5%85%A8...%E5%90%97%3F",class:E(c.value===2?"active":"not-active")},"3 内存安全...吗?",2)]),t("li",null,[t("a",{href:"#%E6%A0%B8%E5%BF%83%E9%97%AE%E9%A2%98%EF%BC%9A%E7%BD%91%E6%98%93%E4%BA%91%E9%9F%B3%E4%B9%90-api",class:E(c.value===3?"active":"not-active")},"4 核心问题：网易云音乐 API",2)]),t("li",null,[t("a",{href:"#%E7%BB%93%E8%AE%BA",class:E(c.value===4?"active":"not-active")},"5 结论",2)])]),t("div",U,[t("span",Y,[e[3]||(e[3]=t("span",{class:"ele-title"},"创建于：",-1)),f(l(a(M)(((u=a(o))==null?void 0:u.blogInfo.createTime)??0)),1)]),t("span",$,[e[4]||(e[4]=t("span",{class:"ele-title"},"修改于：",-1)),f(l(a(M)(((m=a(o))==null?void 0:m.blogInfo.lastUpdate)??0)),1)]),t("span",G,[e[5]||(e[5]=t("span",{class:"ele-title"},"本文字数：",-1)),f(l((y=a(o))==null?void 0:y.blogInfo.wordCount)+"字 ",1)]),t("span",H,[e[6]||(e[6]=t("span",{class:"ele-title"},"预计阅读时间：",-1)),f(l((k=a(o))==null?void 0:k.blogInfo.readingTime)+"分钟 ",1)]),((C=a(o))==null?void 0:C.blogInfo.category)!=="default"?(p(),d("span",K,[e[7]||(e[7]=t("span",{class:"ele-title"},"分类于：",-1)),f(l((_=a(o))==null?void 0:_.blogInfo.category),1)])):g("",!0),(w=a(o))!=null&&w.blogInfo.series.enable?(p(),d("span",Q,[e[8]||(e[8]=t("span",{class:"ele-title"},"系列：",-1)),f(l((T=a(o))==null?void 0:T.blogInfo.series.name),1)])):g("",!0),e[10]||(e[10]=t("span",{class:"copy-right"},[t("span",{class:"ele-title"},"许可协议："),t("p",{"xmlns:cc":"http://creativecommons.org/ns#"},[t("a",{href:"https://creativecommons.org/licenses/by-nc-sa/4.0/?ref=chooser-v1",target:"_blank",rel:"license noopener noreferrer",style:{display:"inline-block"}},"CC BY-NC-SA 4.0")])],-1)),a(o)&&a(o).blogInfo.tags.length>0?(p(),d("span",Z,[e[9]||(e[9]=t("span",{class:"ele-title"},"标签：",-1)),(p(!0),d(q,null,L((x=a(o))==null?void 0:x.blogInfo.tags,h=>(p(),d("span",{class:"tag",key:h},l(h),1))),128))])):g("",!0)])]),e[13]||(e[13]=t("div",{class:"site",id:"site"},"标签2的内容",-1))])])])],512)}}});export{oe as default};
